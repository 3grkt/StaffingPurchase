<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #>
 
 <#
	// UPDATE DOMAIN NAMESPACE HERE
	var domainNameSpace = "StaffingPurchase.Core.Domain";
	// UPDATE ENTITY BASE HERE
	var entityBaseClass = "EntityBase";

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;

namespace <#= code.EscapeNamespace(domainNameSpace) #>
{
<#
    var tableSet = efHost.TableSet;
    var tableName = (string)tableSet.MetadataProperties["Table"].Value
        ?? tableSet.Name;
    var schemaName = (string)tableSet.MetadataProperties["Schema"].Value;
#>

    public partial class <#= ReplaceTableName(efHost.EntityType.Name) #> : <#= entityBaseClass #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= ReplaceTableName(code.Escape(efHost.EntityType)) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= ReplaceTableName(code.Escape(navProperty)) #> = new List<<#= ReplaceTableName(code.Escape(navProperty.ToEndMember.GetEntityType())) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
#>
<#
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= ReplaceTableName(code.Escape(navProperty.ToEndMember.GetEntityType())) #>> <#= ReplaceTableName(code.Escape(navProperty)) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= ReplaceTableName(code.Escape(navProperty.ToEndMember.GetEntityType())) #> <#= ReplaceTableName(code.Escape(navProperty)) #> { get; set; }
<#
        }
    }
#>
    }
}

<#+
public string ReplaceTableName(string tableName)
{
	string replacedName = tableName.StartsWith("tbl") ? tableName.Replace("tbl", "") : tableName;
	return replacedName;
}

#>
